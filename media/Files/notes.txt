What is .net
_____________

	Microsoft introduced .net for bridging gap between interoperability between applications.

	It is a foundation on which where we can build, design, develop and deploy the applications.

	It is a framework that contains more than 300+ language formed as a single group, where we can use one language features within another language.

Why .NET
_________

	Before .net people are using different languages for defferent purposes.

	I need a language that implements any kind of application like 

		1) Console
		
		2) Windows

		3) Web
	
		4) Mobile

		5) Service-Oriented

	where i can use one language features within another language.


Ex : If you know vb.net and another person knows c#.net both will work in same project. as both are .NET framework languagues.


.NET Components
_________________

	(i) CLR (Common Language@ Runtime)
	___________________________________

		Responsible for 
		
			a)	Debugging: CLR sends the corresponding compiler to compile corresponding code.

			b)	Exception Handling : How to handle runtime errors w.r.t. Error pages or Log File entry etc ... 

			c)	Security: Security is key thing for any kind of application as you code

				(i)	Authorized to compile/run/debug

			d)	Version Support : Ensures that the application \oJhich implemented in lower version
				can be used and upgraded automatically to higher version. 


	(ii)	CTS (Common Type System)
	_________________________________

			All .NET framework languages needs to undergone one common state w.r.t. Data Types and ranges.
				Ex: integer in vb.net takes 4 bytes, c#.net integer also needs to take 4 bytes. 

	(iii)	CLS (Common Language Specification)
	___________________________________________

			The code which is there in one .NET framework language can be used in another .NET framework language.

	(iv)	MSIL (Microsoft Intermediate Language)
	_______________________________________________

			When you compile any .NET application at first instead of converting that into 
			CPU Specific code, first it is converted into MSIL. Then it becomes language neutral. 

	(v)	JIT (Just-In Time) :
	____________________________

			Used to convert MSIL into CPU understandable format.




Namespaces and Assemblies :
____________________________

	Contains group of related classes that which belongs to one common group. If you want to overcome the naming conflicts between classes then we need 	the help of namespaces. 


Compiling and Execution Procedure of .NET 
___________________________________________

	(i) When you compile any .NET application first 
		(instead of converting that into CPU) 
		code first it would be converted into MSIL. 
		Either exe or dll file will be created. 

	(ii) Then it would be send to class loader.

		There are 2 types of class loaders kno1.'lln as 

			(a)	Primordial Class Loader : Used to load all system classes which are required to run the program.
			(b)	Class Loader Objects : Used to load all custom classes which are required to run the program.

	(iii)	In class Loader we have JIT Compiler, converts the MSIL into CPU specific code.

	(iv)	Then it would be send to execution manager, which con ta ins queue of progran1s which are ready to run where we can execute the program. 


		*** Before execution, it needs to undergone the security authentication *** 




Object Oriented Programming: 
_____________________________

	It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and 	objects, which are to be used as templates for creating copies of such modules on demand. 

		Object : An object is a real world entity, that which possess 3 characterstics known as

		(i)	state

		(ii)	behaviour

		(iii)	identity


OOPs features : 
________________

	(i)	Encapsulation: 
	_______________________
		
			Wrapping up of data and functions into a single unit known as Encapsulation.

	(ii)	Abstraction: 
	______________________

			Hiding the irrelevant details of an object that do not contribute to its essential characterstics known as abstraction. 

			*** Encapsulation focuses on showing the relevant details, where abstraction focuses on hiding the irrelevant details ***

	(iii)	Inheritance: 
	_____________________

			Deriving a new class from already existing class known as inheritance, through inheritance we can reduce the size of the 					program. 

	(iv)	Polymorphism: 
	______________________

			The ability to take more than one form known as polymorphism.



class : 
_________

	A class is a template or blueprint, that which contains the combination of data members a.nd member functions. Members of the class can be 	accessable by using the instance of the class.
	
	class class name 
	{
		data members;
		member functions; 
	}


Access Modifiers : 
___________________

	(i)	private : Allows you to access members within the current class.
	_________________

	(ii)	public : Allows you to access n1embers in entire application.
	________________

	(iii)	protected: Allows you to access members within current/derived classes.
	__________________

	(iv)	internal: Allows you to access members within all classes of current namespace.
	__________________

	(v)	protected internal: Allows you to access members within all classes of current namespace, and other namespace derived classes. 
	____________________________



the top level class for .NET is System.Object 

BCL (Base Class Libraries) 

FCL (Framework Class Libraries) 


Data Types : 
______________

	There are 2 types of data types as 
	
		(i) value types : 
		__________________

			int, float, double, char, bool etc .... 

		(ii) reference types : 
		_______________________

			Object, String and custom classe.

		*** Value types will be stored in STACK memory and reference types will be stored in HEAP memory *** 



Namespace --> class --> Main()
_________________________________

You can define method Main() as:
	static void Main()
	{
		...
	}

	We have to make Main() as static, as no class object will call the method Main(), 
	as Main() is the entry point to the progran1, as control comes auton1atically into this. 




Control structures:
___________________
	
	used to define the flow of the program.

	there are two types of control structure known as
		
		(i) Branching
		_______________
			
			if ... else : used to execute stsements based on the condition.

		(ii) Looping
		______________

			for every loop basically there are 3 phases as
				1. Initialization:
					performed at the begning of the loop
				2. Condition
				3. Increment/Decrement
	

			1. for
			2. foreach
			3. while
			4. do while


Array:
_______

	An array is the finite ordered set of homogeneous element, means all elements belongs to the same data type. All elements of array are stored in successive memory locations.

	int[] arrayName;

		or

	int [] arr = new int[] {1, 2, 3, 4, 5};

		or

	int[] arr = new int[10];


String:
_________

	In C# strings are immutable means once they are assigned, can't be changed.

	There are 3 types of parameters as:

		1) in
		_______

		2) ref:
		________

			keyword to send the reference of the variable.

		3) out:
		_________
 
			if you want to return more than one value to the corresponding function then we need the help of out parameter.

			








